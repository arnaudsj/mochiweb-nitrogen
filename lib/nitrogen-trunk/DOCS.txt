



VALIDATION
The #validate Action is another special type of Action. It allows you to attach validation to an element. The provided validators validate data on BOTH the client side (using LiveValidation) and the server side.

To add validation, use the wire command:
wf:wire(TriggerElement, TargetElement, #validate { validators=LIST OF VALIDATORS })
See wf.inc for a list of validators, and look at the individual modules for more detail. For example, the #is_required validator uses validate_is_required.erl.



GET AND POST ARGUMENTS
During a get request, you can access the value of get arguments using wf:q(arg_name_as_atom).
During a post request, you access the value of an element using wf:q(element_name_as_atom).



UPDATING WITH AJAX
To update an element during a postback, use one of the following:

wf:update(element_name_as_atom, NewTerms)
wf:insert_top(element_name_as_atom, NewTerms)
wf:insert_bottom(element_name_as_atom, NewTerms)



THE ELEMENT TREE
Multiple elements can have the same name. To differentiate, you can reference them using their path in the tree.
For example:
[Value1] = wf:q(parent1.child_control)
[Value2] = wf:q(parent2.child_control)

This part is untested, but in theory, you can use wf:q to pull back multiple values.
[Value1, Value2] = wf:q(child_control)



TEMPLATES

Use the #body element for a bare page, and use the #template tag to create a page template from an html file.
Read through element_template code to understand more.



USERS AND ROLES

There is support for users and roles.
Use wf:user() to get the current user and wf:user(User) to set the current user.
Likewise, use wf:role(Role) to see if the user is in a role, and wf:role(Role, Bool) to set whether the user is in a role.



CREATE YOUR OWN ELEMENTS

Because of Erlang's flexibility, you can easily add your own elements. Just define a record named after your element and include the ELEMENT_BASE attributes.

-record(myelement, {?ELEMENT_BASE, attr1, attr2, attr3 })

Then create a new module for the element, ie: 'element_myelement.erl'. See the existing elements for examples.

For some advance examples on how to have an element call back into a page, check out element_inplace_textbox and element_wizard.



CONTINUATIONS
Use wf:continue(Tag, FunctionToRun) to set up a continuation. This will start FunctionToRun, and then tell the web page to keep checking back until the function has completed.

Once the function has completed, it will call the continue/2 on your page, passing in the Tag and the Return Value.
